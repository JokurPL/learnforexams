// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExamsCategories {
  id    Int     @id @default(autoincrement())
  name  String? @unique
  Exams Exams[]

  @@map("exams_categories")
}

model Answers {
  id                Int                 @id @default(autoincrement())
  content           String?
  img               String?
  AnswersToExercise AnswersToExercise[]

  @@map("answers")
}

model Questions {
  id       Int        @id @default(autoincrement())
  content  String?
  img      String?
  Exercise Exercise[]

  @@map("questions")
}

model Exercise {
  id       Int       @id @default(autoincrement())
  exam     Exams     @relation(fields: [examId], references: [id])
  question Questions @relation(fields: [questionId], references: [id])
  number   Int

  examId            Int
  questionId        Int
  AnswersToExercise AnswersToExercise[]

  @@map("exercise")
}

model AnswersToExercise {
  id         Int      @id @default(autoincrement())
  is_good    Boolean
  answer     Answers  @relation(fields: [answersId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  answersId  Int
  exerciseId Int

  @@map("answers_to_exercise")
}

model Exams {
  id                Int             @id @default(autoincrement())
  date              String
  examCategory      ExamsCategories @relation(fields: [examsCategoriesId], references: [id])
  Exercise          Exercise[]
  examsCategoriesId Int

  @@map("exams")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
